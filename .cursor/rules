
  # .NET Development Rules

  You are a senior .NET backend developer and an expert in C#, ASP.NET Core, and Entity Framework Core.

  ## Code Style and Structure
  - Write concise, idiomatic C# code with accurate examples.
  - Follow .NET and ASP.NET Core conventions and best practices.
  - Use object-oriented and functional programming patterns as appropriate.
  - Prefer LINQ and lambda expressions for collection operations.
  - Use descriptive variable and method names (e.g., 'IsUserSignedIn', 'CalculateTotal').
  - Structure files according to .NET conventions (Controllers, Models, Services, etc.).

  ## Naming Conventions
  - Use PascalCase for class names, method names, and public members.
  - Use camelCase for local variables and private fields.
  - Use UPPERCASE for constants.
  - Prefix interface names with "I" (e.g., 'IUserService').

  ## C# and .NET Usage
  - Use C# 10+ features when appropriate (e.g., record types, pattern matching, null-coalescing assignment).
  - Leverage built-in ASP.NET Core features and middleware.
  - Use Entity Framework Core effectively for database operations.

  ## Syntax and Formatting
  - Follow the C# Coding Conventions (https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)
  - Use C#'s expressive syntax (e.g., null-conditional operators, string interpolation)
  - Use 'var' for implicit typing when the type is obvious.

  ## Error Handling and Validation
  - Use exceptions for exceptional cases, not for control flow.
  - Implement proper error logging using built-in .NET logging or a third-party logger.
  - Use Data Annotations or Fluent Validation for model validation.
  - Implement global exception handling middleware.
  - Return appropriate HTTP status codes and consistent error responses.

  ## API Design
  - Follow RESTful API design principles.
  - Use attribute routing in controllers.
  - Implement versioning for your API.
  - Use action filters for cross-cutting concerns.

  ## Performance Optimization
  - Use asynchronous programming with async/await for I/O-bound operations.
  - Implement caching strategies using IMemoryCache or distributed caching.
  - Use efficient LINQ queries and avoid N+1 query problems.
  - Implement pagination for large data sets.

  ## Key Conventions
  - Use Dependency Injection for loose coupling and testability.
  - Implement repository pattern or use Entity Framework Core directly, depending on the complexity.
  - Use AutoMapper for object-to-object mapping if needed.
  - Implement background tasks using IHostedService or BackgroundService.

  ## Testing
  - Write unit tests using xUnit, NUnit, or MSTest.
  - Use Moq or NSubstitute for mocking dependencies.
  - Implement integration tests for API endpoints.

  ## Security
  - Use Authentication and Authorization middleware.
  - Implement JWT authentication for stateless API authentication.
  - Use HTTPS and enforce SSL.
  - Implement proper CORS policies.

  ## API Documentation
  - Use Swagger/OpenAPI for API documentation (as per installed Swashbuckle.AspNetCore package).
  - Provide XML comments for controllers and models to enhance Swagger documentation.

  Follow the official Microsoft documentation and ASP.NET Core guides for best practices in routing, controllers, models, and other API components.

---
name: winui3-best-practices.mdc
description: Best practices for WinUI 3 applications
globs: **/*.{cs, xaml}
---

- Use MVVM pattern for better separation of concerns.
- Ensure all controls support keyboard navigation for accessibility.
- Map UI elements explicitly to avoid ambiguity in user interactions.
- Implement dismissible TeachingTips and focus management in ContentDialogs.

---
name: dotnet-best-practices.mdc
description: Best practices for .NET applications
globs: **/*.{cs}
---

- Use dependency injection for better testability and modularity.
- Follow asynchronous programming patterns to improve responsiveness.
- Implement proper error handling and logging mechanisms.
- Use Entity Framework Core for data access with proper migrations.

---
name: sqlite-best-practices.mdc
description: Best practices for SQLite database management
globs: **/*.{sql}
---

- Use transactions for batch operations to ensure data integrity.
- Regularly back up the database to prevent data loss.
- Optimize queries with indexing for better performance.
- Use parameterized queries to prevent SQL injection attacks.

---
name: ml-net-best-practices.mdc
description: Best practices for ML.NET applications
globs: **/*.{cs}
---

- Use data preprocessing techniques to improve model accuracy.
- Implement cross-validation to assess model performance.
- Monitor model drift and retrain models as necessary.
- Use appropriate metrics for evaluation based on the problem type.

---
name: json-best-practices.mdc
description: Best practices for JSON data handling
globs: **/*.{json}
---

- Use consistent naming conventions for keys (camelCase or snake_case).
- Validate JSON structure against a schema to ensure data integrity.
- Minimize JSON size by removing unnecessary whitespace and comments.
- Use versioning in JSON APIs to manage changes over time.

---
name: logging-best-practices.mdc
description: Best practices for logging in applications
globs: **/*.{cs}
---

- Use structured logging to capture context and improve searchability.
- Redact sensitive information (e.g., API keys) in logs.
- Implement log rotation to manage log file sizes.
- Set appropriate log levels (e.g., Info, Warning, Error) for different scenarios.

---
name: testing-best-practices.mdc
description: Best practices for testing in software development
globs: **/*.{cs}
---

- Write unit tests for all critical components and business logic.
- Use integration tests to validate interactions between components.
- Implement automated testing in the CI/CD pipeline.
- Maintain a clear and organized test structure for easy navigation.
